<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item active" aria-current="page">
      Subscriber Number - 7508788105
    </li>
  </ol>
</nav>

<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/offers/view">Offers</a></li>
    <li class="breadcrumb-item">
      <a href="/account-balance/view">AccountBalance</a>
    </li>
  </ol>
</nav>

<div class="container mt-4">
  <div class="d-flex justify-content-end mb-3">
    <!-- <button class="btn btn-outline-success me-2" type="button">
      <i class="bi bi-plus-lg"></i> Add Offer
    </button> -->
    <button class="btn btn-outline-danger" type="button">
      <i class="bi bi-trash-fill"></i> Delete All
    </button>
  </div>

  <div>
    <table class="table table-striped table-hover align-middle caption-top">
      <caption>
        List of FreeUnits
      </caption>

      <thead class="table-dark">
        <tr>
          <th scope="col">FreeUnit</th>
          <th scope="col">FreeUnitName</th>
          <th scope="col">UnitType</th>
          <th scope="col">InstanceID</th>
          <th scope="col">InitialAmount</th>
          <th scope="col">CurrentAmount</th>
          <th scope="col">EffectiveTime</th>
          <th scope="col">ExpireTime</th>
          <th scope="col" class="text-center">Action</th>
        </tr>
      </thead>
      <tbody>
        <% if (response.raw && response.raw.length > 0) { %> <%
        response.raw.forEach((arrv) => { %>
        <tr>
          <td scope="row"><%= arrv.FreeUnitType %></td>
          <td><%= arrv.FreeUnitTypeName %></td>
          <td><%= arrv.MeasureUnitName %></td>
          <td><%= arrv.FreeUnitInstanceID %></td>
          <td><%= arrv.InitialAmount %></td>
          <td><%= arrv.CurrentAmount %></td>
          <td><%= arrv.EffectiveTime %></td>
          <td><%= arrv.ExpireTime %></td>
          <td class="text-center">
            <button
              type="button"
              class="btn btn-sm btn-outline-danger"
              title="Delete FreeUnit"
              data-offer-id="<%= arrv.FreeUnitInstanceID %>"
            >
              <i class="bi bi-trash"></i>
            </button>
          </td>
        </tr>
        <% }) %> <% } else { %>
        <tr>
          <td colspan="9" class="text-center text-muted">
            No FreeUnits found.
          </td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
</div>

<script>
  document
    .querySelectorAll('button[title="Delete FreeUnit"]')
    .forEach((btn) => {
      btn.addEventListener("click", async () => {
        const offerId = btn.dataset.offerId;
        // const purchaseSeq = btn.dataset.purchaseSeq;

        // if (!confirm(`Are you sure you want to delete offer ID ${offerId}?`)) {
        //   return;
        // }

        const confirmResult = await Swal.fire({
          title: "Are you sure?",
          text: `Delete InstanceID ${offerId}?`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes, delete it!",
        });

        if (!confirmResult.isConfirmed) {
          return;
        }

        const response = await fetch("/free-units/delete", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            offeringId: offerId,
          }),
        });

        const result = await response.json();
        Swal.fire({
          title: `FreeUnit Id ${offerId}`,
          text: "This will close in 1 seconds.",
          icon: "success",
          timer: 1000,
          showConfirmButton: false,
          willClose: () => {
            location.reload(); // only reload after alert finishes
          },
        });

        // try {
        //   // if (result.success) {
        //   //   alert(`Offer ${offerId} deleted successfully.`);
        //   //   location.reload(); // Refresh to update table
        //   // } else {
        //   //   alert(`Failed to delete offer: ${result.message || "Unknown error"}`);
        //   // }
        // } catch (error) {
        //   console.error("Error deleting offer:", error);
        //   alert("An error occurred while deleting the offer.");
        // }
      });
    });
</script>

<script>
  document
    .querySelector(".btn-outline-danger")
    .addEventListener("click", async () => {
      const rows = document.querySelectorAll("tbody tr");
      const offers = [];

      rows.forEach((row) => {
        const deleteBtn = row.querySelector("button[data-offer-id]");
        if (deleteBtn) {
          offers.push({
            offeringId: deleteBtn.dataset.offerId,
          });
        }
      });

      if (offers.length === 0) {
        Swal.fire(
          "No FreeUnits found!",
          "There are no FreeUnit to delete.",
          "info"
        );
        return;
      }

      const confirm = await Swal.fire({
        title: "Delete All FreeUnits?",
        text: `You are about to delete ${offers.length} FreeUnits.`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete all!",
        cancelButtonText: "Cancel",
      });

      if (!confirm.isConfirmed) return;

      // Show progress bar
      Swal.fire({
        title: "Deleting FreeUnits...",
        html: `
        <div id="progress-text" class="mb-2">Starting...</div>
        <div class="progress" style="height: 20px;">
          <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0%;"></div>
        </div>
      `,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false, // âœ… hides OK button
        didOpen: async () => {
          const progressBar = document.getElementById("progress-bar");
          const progressText = document.getElementById("progress-text");

          let completed = 0;
          for (const offer of offers) {
            progressText.innerText = `Deleting FreeUnit ID: ${offer.offeringId}`;
            try {
              await fetch("/free-units/delete", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(offer),
              });
            } catch (err) {
              console.error("Error deleting:", offer, err);
            }
            completed++;
            const percent = Math.round((completed / offers.length) * 100);
            progressBar.style.width = `${percent}%`;
            progressBar.innerText = `${percent}%`;
          }

          progressText.innerText = "All FreeUnits deleted successfully!";
          progressBar.classList.remove("progress-bar-animated");
          progressBar.classList.add("bg-success");

          await new Promise((res) => setTimeout(res, 1200)); // small delay before closing
          Swal.close();
          location.reload();
        },
      });
    });
</script>
